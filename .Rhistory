})
selected_ssc <- reactive({
anno[anno$`Stem cell name`==input$stemName,]
})
output$image <- renderImage({
# Generate or load the image data dynamically
# Example: load an image file
list(src = "www/mtree.png",
contentType = "image/png",
width = "1000%")
}, deleteFile = FALSE)
output$imageOPC <- renderImage({
# Generate or load the image data dynamically
# Example: load an image file
list(src = "www/OPCMapping.png",
contentType = "image/png",
width = "1000%")
}, deleteFile = FALSE)
observeEvent(input$submit, {
row <- selected_row()
output$Description <- renderText(HTML(paste0("Description : ", row[["Description"]])))
output$Annotation_level <- renderText( paste0("Annotation_level : ", row[["Anno_level"]]))
output$Organ <- renderText( paste0("Predominant tissue origin : ", row[["Organ"]]))
output$Tissue <- renderText( paste0("Predominant tissue location : ", row[["Tissue"]]))
output$TissueSpecific <- renderText( paste0("Predominant tissue (histology) : ", row[["Tissue.Specific."]]))
output$Age <- renderText( paste0("Predominant age : ", row[["Age"]]))
output$AgeDetail <- renderText( paste0("Predominant age (detail) : ", row[["Age.In.Detail."]]))
highlighted_cell <- colnames(wt_integrate)[wt_integrate@meta.data[input$name]==input$dynamic]
output$seuratPlot <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell,raster = TRUE)
p2 <- DimPlot(wt_integrate,group.by = input$name,raster = TRUE)
print(p1+p2)
})
})
observeEvent(input$submitStem, {
row2 <- selected_ssc()
highlighted_cell <- objList[[input$stemName]]
# output_html <- list(
#   tags$div(
#     tags$p("Marker: ", row[["Marker"]]),
#     tags$br(),
#     "Year of publishment: ", row[["Year"]]
#   )
output_text <- paste0("Marker: ", row2[["Marker"]])
# Update the output with the selected row
output$sc_name <- renderText( paste0("The stem cell name is : ", row2[["Stem cell name"]]))
output$marker <- renderText(output_text)
output$publish <- renderText( paste0("It was first published on: ",row2[["Journal"]],", The article name is", row2[["Publication"]],", in " ,row2[["Year"]] ))
output$functions <- renderText( paste0("The function of this stem cells:", row2[["Function"]]))
output$cluster <- renderText( paste0("It includes these clusters of cells in the atlas:", row2[["Cluster_name"]]))
output$organ <- renderText( paste0("It lives in organ:", row2[["Organ"]]," and tissue:",row2[["Tissue location"]]))
output$method <- renderText( paste0("The method of discovering this cluster of cells was ", row2[["Method"]]))
output$confidence <- renderText( paste0("We have ", row2[["Confidence level"]]," confidence that this stem cell match the area in our atlas"))
output$seuratPlotStem <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell,raster = TRUE)
p2 <- DimPlot(wt_integrate,group.by = "Tissue origin",raster = TRUE)
p3 <- DimPlot(wt_integrate,group.by = "level-2-anno",raster = TRUE)
p1+p2+p3
})
})
}
# Run the app
shinyApp(ui, server)
meta <- wt_integrate@meta.data
unique(meta$Project)
meta <- meta[meta$Project!="Mesenchymal2022_Zhang",]
write.csv("../../metadata.csv")
write.csv(meta,"../../metadata.csv")
# Run the app
shinyApp(ui, server)
# Run the app
shinyApp(ui, server)
# Load required packages
library(shiny)
library(Seurat)
# Add Bootstrap theme
library(shinythemes)
wt_integrate <- readRDS("mini_trajatlas.Rds")
wt_integrate@assays$originalexp@key <- "rna_"
descript <- read.csv("Supp_table2_cell_description_2.csv")
anno <- readxl::read_xlsx("ssc_anno.xlsx")
objList <- readRDS("highlightcell.Rds")
none_value <- rep("None",dim(descript)[2])
descript <- rbind(descript,none_value)
# Define the UI
ui <- shiny::fluidPage(
theme = shinytheme("flatly"),
tags$head(
HTML(
"
<script>
var socket_timeout_interval
var n = 0
$(document).on('shiny:connected', function(event) {
socket_timeout_interval = setInterval(function(){
Shiny.onInputChange('count', n++)
}, 15000)
});
$(document).on('shiny:disconnected', function(event) {
clearInterval(socket_timeout_interval)
});
</script>
"
)
),
shiny::titlePanel("Overview of Differentiation Atlas"),
navbarPage("MENU",
tabPanel("Annotation",
# Create a select input for the column values
selectInput("name", "Select a slot", choices =  c("level-1-anno", "level-2-anno", "level-3-anno", "level-4-anno", "level-5-anno",
"level-6-anno", "level-7-anno", "Project", "Tissue origin", "Tissue location", "Tissue.Specific.",
"Stage", "Gene.type", "Treatment", "Age", "Age.In.Detail.", "Machine",
"Origin", "paper_label", "coarse_label")),
uiOutput("ui"),
actionButton("submit", "Submit"),
textOutput("Description"),
textOutput("Annotation_level"),
textOutput("Organ"),
textOutput("Tissue"),
textOutput("TissueSpecific"),
textOutput("Age"),
textOutput("AgeDetail"),
plotOutput("seuratPlot",width = "60%"),
column(1,
imageOutput("image", height = 50000)
)
),
tabPanel("OPC Mapping",
selectInput("stemName", "Select stem cells' name", choices = c("Pdgfra+ BMSC", "Acta2+ BMSC", "Lepr+ BMSC", "Cxcl12+ BMSC",
"Clec11a+ BMSC", "Adipoq+ BMSC", "Nes+ BMSC", "Grem1+ BMSC",
"pvSSC", "Cdh2+ BMSC", "Mcam+ BMSC", "Hypertrophic chondrocyte",
"Chondrocyte", "Early perichondrial cell", "Hox11+ chondrocyte",
"ocSSC", "Pthlh+ chondrocyte", "Fox2a+ chondrocyte", "Cd168+ skeletal stem/progenitor cell",
"Axin2+ MSC", "Hhip+ MSC", "Msx2+ MSC", "Gli1+ MSC", "Prrx1+ MSC"
)),
actionButton("submitStem", "Submit"),
textOutput("sc_name"),
textOutput("marker"),
textOutput("publish"),
textOutput("functions"),
textOutput("cluster"),
textOutput("organ"),
textOutput("method"),
textOutput("confidence"),
plotOutput("seuratPlotStem",width = "80%"),
column(1,
imageOutput("imageOPC", height = 50000)
)
),
)
)
# Define the server
server <- function(input, output) {
# wt_integrate <- readRDS("mini_trajatlas.Rds")
# wt_integrate@assays$originalexp@key <- "rna_"
# descript <- read.csv("Supp_table2_cell_description_2.csv")
# anno <- readxl::read_xlsx("ssc_anno.xlsx")
# objList <- readRDS("highlightcell.Rds")
# none_value <- rep("None",dim(descript)[2])
# descript <- rbind(descript,none_value)
output$ui <- renderUI({
if (is.null(input$name))
return()
# Depending on input$input_type, we'll generate a different
# UI component and send it to the client.
selectInput("dynamic", "Select an idents",
choices = unique(wt_integrate@meta.data[input$name]),
selected = "option2"
)
})
selected_row <- reactive({
if (!is.null(input$dynamic)) {
if (input$dynamic %in% descript$X) {
descript[descript$X == input$dynamic, ]
} else {
descript[descript$X == "None", ]
}
}
})
selected_ssc <- reactive({
anno[anno$`Stem cell name`==input$stemName,]
})
output$image <- renderImage({
# Generate or load the image data dynamically
# Example: load an image file
list(src = "www/mtree.png",
contentType = "image/png",
width = "1000%")
}, deleteFile = FALSE)
output$imageOPC <- renderImage({
# Generate or load the image data dynamically
# Example: load an image file
list(src = "www/OPCMapping.png",
contentType = "image/png",
width = "1000%")
}, deleteFile = FALSE)
observeEvent(input$submit, {
row <- selected_row()
output$Description <- renderText(HTML(paste0("Description : ", row[["Description"]])))
output$Annotation_level <- renderText( paste0("Annotation_level : ", row[["Anno_level"]]))
output$Organ <- renderText( paste0("Predominant tissue origin : ", row[["Organ"]]))
output$Tissue <- renderText( paste0("Predominant tissue location : ", row[["Tissue"]]))
output$TissueSpecific <- renderText( paste0("Predominant tissue (histology) : ", row[["Tissue.Specific."]]))
output$Age <- renderText( paste0("Predominant age : ", row[["Age"]]))
output$AgeDetail <- renderText( paste0("Predominant age (detail) : ", row[["Age.In.Detail."]]))
highlighted_cell <- colnames(wt_integrate)[wt_integrate@meta.data[input$name]==input$dynamic]
#label_logic <- !("level-1-anno" %in%  c("level-5-anno","level-6-anno","level-7-anno"))
output$seuratPlot <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell,raster = TRUE)
if ( (input$name %in%  c("level-5-anno","level-6-anno","level-7-anno"))){
p2 <- DimPlot(wt_integrate,group.by = input$name,raster = TRUE)+NoLegend()
}
else{
p2 <- DimPlot(wt_integrate,group.by = input$name,raster = TRUE)
}
print(p1+p2)
})
})
observeEvent(input$submitStem, {
row2 <- selected_ssc()
highlighted_cell <- objList[[input$stemName]]
# output_html <- list(
#   tags$div(
#     tags$p("Marker: ", row[["Marker"]]),
#     tags$br(),
#     "Year of publishment: ", row[["Year"]]
#   )
output_text <- paste0("Marker: ", row2[["Marker"]])
# Update the output with the selected row
output$sc_name <- renderText( paste0("The stem cell name is : ", row2[["Stem cell name"]]))
output$marker <- renderText(output_text)
output$publish <- renderText( paste0("It was first published on: ",row2[["Journal"]],", The article name is", row2[["Publication"]],", in " ,row2[["Year"]] ))
output$functions <- renderText( paste0("The function of this stem cells:", row2[["Function"]]))
output$cluster <- renderText( paste0("It includes these clusters of cells in the atlas:", row2[["Cluster_name"]]))
output$organ <- renderText( paste0("It lives in organ:", row2[["Organ"]]," and tissue:",row2[["Tissue location"]]))
output$method <- renderText( paste0("The method of discovering this cluster of cells was ", row2[["Method"]]))
output$confidence <- renderText( paste0("We have ", row2[["Confidence level"]]," confidence that this stem cell match the area in our atlas"))
output$seuratPlotStem <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell,raster = TRUE)
p2 <- DimPlot(wt_integrate,group.by = "Tissue origin",raster = TRUE)
p3 <- DimPlot(wt_integrate,group.by = "level-2-anno",raster = TRUE)
p1+p2+p3
})
})
}
# Run the app
shinyApp(ui, server)
# Load required packages
library(shiny)
library(Seurat)
library(bslib)
library(shinyjs)
# Load data
wt_integrate <- readRDS("mini_trajatlas.Rds")
wt_integrate@assays$originalexp@key <- "rna_"
descript <- read.csv("Supp_table2_cell_description_2.csv")
anno <- readxl::read_xlsx("ssc_anno.xlsx")
objList <- readRDS("highlightcell.Rds")
none_value <- rep("None", dim(descript)[2])
descript <- rbind(descript, none_value)
# Define the UI
ui <- page_navbar(
title = "Overview of Differentiation Atlas",
theme = bs_theme(version = 5, bootswatch = "flatly"),
nav_panel(
"Annotation",
layout_sidebar(
sidebar = sidebar(
selectInput("name", "Select a slot",
choices = c("level-1-anno", "level-2-anno", "level-3-anno", "level-4-anno", "level-5-anno",
"level-6-anno", "level-7-anno", "Project", "Tissue origin", "Tissue location", "Tissue.Specific.",
"Stage", "Gene.type", "Treatment", "Age", "Age.In.Detail.", "Machine",
"Origin", "paper_label", "coarse_label")),
uiOutput("ui"),
actionButton("submit", "Submit", class = "btn-primary")
),
card(
card_header("Cell Information"),
textOutput("Description"),
textOutput("Annotation_level"),
textOutput("Organ"),
textOutput("Tissue"),
textOutput("TissueSpecific"),
textOutput("Age"),
textOutput("AgeDetail")
),
card(
card_header("Visualization"),
plotOutput("seuratPlot", width = "100%", height = "600px")
),
card(
card_header("Overview"),
imageOutput("image", height = "auto")
)
)
),
nav_panel(
"OPC Mapping",
layout_sidebar(
sidebar = sidebar(
selectInput("stemName", "Select stem cells' name",
choices = c("Pdgfra+ BMSC", "Acta2+ BMSC", "Lepr+ BMSC", "Cxcl12+ BMSC",
"Clec11a+ BMSC", "Adipoq+ BMSC", "Nes+ BMSC", "Grem1+ BMSC",
"pvSSC", "Cdh2+ BMSC", "Mcam+ BMSC", "Hypertrophic chondrocyte",
"Chondrocyte", "Early perichondrial cell", "Hox11+ chondrocyte",
"ocSSC", "Pthlh+ chondrocyte", "Fox2a+ chondrocyte", "Cd168+ skeletal stem/progenitor cell",
"Axin2+ MSC", "Hhip+ MSC", "Msx2+ MSC", "Gli1+ MSC", "Prrx1+ MSC")),
actionButton("submitStem", "Submit", class = "btn-primary")
),
card(
card_header("Stem Cell Information"),
textOutput("sc_name"),
textOutput("marker"),
textOutput("publish"),
textOutput("functions"),
textOutput("cluster"),
textOutput("organ"),
textOutput("method"),
textOutput("confidence")
),
card(
card_header("Visualization"),
plotOutput("seuratPlotStem", width = "100%", height = "600px")
),
card(
card_header("OPC Mapping Overview"),
imageOutput("imageOPC", height = "auto")
)
)
)
)
# Define the server
server <- function(input, output) {
output$ui <- renderUI({
if (is.null(input$name))
return()
selectInput("dynamic", "Select an idents",
choices = unique(wt_integrate@meta.data[[input$name]]),
selected = "option2"
)
})
selected_row <- reactive({
if (!is.null(input$dynamic)) {
if (input$dynamic %in% descript$X) {
descript[descript$X == input$dynamic, ]
} else {
descript[descript$X == "None", ]
}
}
})
selected_ssc <- reactive({
anno[anno$`Stem cell name` == input$stemName,]
})
output$image <- renderImage({
list(src = "www/mtree.png",
contentType = "image/png",
width = "100%")
}, deleteFile = FALSE)
output$imageOPC <- renderImage({
list(src = "www/OPCMapping.png",
contentType = "image/png",
width = "100%")
}, deleteFile = FALSE)
observeEvent(input$submit, {
row <- selected_row()
output$Description <- renderText(paste0("Description: ", row[["Description"]]))
output$Annotation_level <- renderText(paste0("Annotation level: ", row[["Anno_level"]]))
output$Organ <- renderText(paste0("Predominant tissue origin: ", row[["Organ"]]))
output$Tissue <- renderText(paste0("Predominant tissue location: ", row[["Tissue"]]))
output$TissueSpecific <- renderText(paste0("Predominant tissue (histology): ", row[["Tissue.Specific."]]))
output$Age <- renderText(paste0("Predominant age: ", row[["Age"]]))
output$AgeDetail <- renderText(paste0("Predominant age (detail): ", row[["Age.In.Detail."]]))
highlighted_cell <- colnames(wt_integrate)[wt_integrate@meta.data[[input$name]] == input$dynamic]
output$seuratPlot <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell, raster = TRUE)
if (input$name %in% c("level-5-anno", "level-6-anno", "level-7-anno")) {
p2 <- DimPlot(wt_integrate, group.by = input$name, raster = TRUE) + NoLegend()
} else {
p2 <- DimPlot(wt_integrate, group.by = input$name, raster = TRUE)
}
p1 + p2
})
})
observeEvent(input$submitStem, {
row2 <- selected_ssc()
highlighted_cell <- objList[[input$stemName]]
output$sc_name <- renderText(paste0("The stem cell name is: ", row2[["Stem cell name"]]))
output$marker <- renderText(paste0("Marker: ", row2[["Marker"]]))
output$publish <- renderText(paste0("It was first published in ", row2[["Journal"]], ". The article name is '", row2[["Publication"]], "', published in ", row2[["Year"]]))
output$functions <- renderText(paste0("The function of these stem cells: ", row2[["Function"]]))
output$cluster <- renderText(paste0("It includes these clusters of cells in the atlas: ", row2[["Cluster_name"]]))
output$organ <- renderText(paste0("It is found in organ: ", row2[["Organ"]], " and tissue: ", row2[["Tissue location"]]))
output$method <- renderText(paste0("The method of discovering this cluster of cells was ", row2[["Method"]]))
output$confidence <- renderText(paste0("We have ", row2[["Confidence level"]], " confidence that this stem cell matches the area in our atlas"))
output$seuratPlotStem <- renderPlot({
p1 <- DimPlot(wt_integrate, cells.highlight = highlighted_cell, raster = TRUE)
p2 <- DimPlot(wt_integrate, group.by = "Tissue origin", raster = TRUE)
p3 <- DimPlot(wt_integrate, group.by = "level-2-anno", raster = TRUE)
p1 + p2 + p3
})
})
}
# Run the app
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
runApp('app2.R')
anno <- readxl::read_xlsx("S3_Table_ssc_anno.xlsx")
objList
names(objList)
anno$`Stem cell name`
intersect(anno$`Stem cell name`,  names(objList))
runApp()
runApp('app2.R')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
wt_integrate
umap1 <- wt_integrate@reductions$X_umap
umap1
umap1 <- wt_integrate@reductions$X_umap@cell.embeddings
umap1
head(umap1)
meta <- wt_integrate@meta.data
umap_meta <- cbind(umap1,meta)
umap_meta
sf_df <- st_as_sf(umap_meta, coords = c("Xumap_1", "Xumap_2"), crs = 3857)
library(sf)
sf_df <- st_as_sf(umap_meta, coords = c("Xumap_1", "Xumap_2"), crs = 3857)
library(ggplot2)
library(viridis)
library(ggrastr)  # For rasterized plotting
# Basic Plot using geom_sf
ggplot(sf_df) +
geom_sf(aes(color = `level-1-anno`), size = 0.5, alpha = 0.7) +
scale_color_viridis(discrete = TRUE) +
theme_minimal() +
labs(title = "UMAP Projection with Geospatial Plotting",
color = "Level 1 Annotation")
# Define Grid Resolution
# Adjust 'n_bins' based on desired resolution and performance
n_bins <- 500  # For a 500x500 grid
# Convert DataFrame to data.table for Efficiency
df <- umap_meta
dt <- as.data.table(df)
# Define Grid Resolution
# Adjust 'n_bins' based on desired resolution and performance
n_bins <- 500  # For a 500x500 grid
library(data.table)
dt <- as.data.table(df)
# Define Grid Resolution
# Adjust 'n_bins' based on desired resolution and performance
n_bins <- 500  # For a 500x500 grid
# Compute Binning Breaks
x_breaks <- seq(min(dt$Xumap_1), max(dt$Xumap_1), length.out = n_bins + 1)
y_breaks <- seq(min(dt$Xumap_2), max(dt$Xumap_2), length.out = n_bins + 1)
# Assign Each Point to a Grid Cell
dt[, x_bin := cut(Xumap_1, breaks = x_breaks, include.lowest = TRUE, labels = FALSE)]
dt[, y_bin := cut(Xumap_2, breaks = y_breaks, include.lowest = TRUE, labels = FALSE)]
# Remove Points Outside the Grid (if any)
dt <- dt[!is.na(x_bin) & !is.na(y_bin)]
# Aggregate Counts per Grid Cell
agg_counts <- dt[, .N, by = .(x_bin, y_bin, `level-1-anno`)]
# For Overall Density (ignoring 'level-1-anno'), aggregate counts
agg_overall <- dt[, .N, by = .(x_bin, y_bin)]
# Compute Center Coordinates for Each Grid Cell
agg_overall[, x_center := x_breaks[x_bin] + (x_breaks[2] - x_breaks[1])/2]
agg_overall[, y_center := y_breaks[y_bin] + (y_breaks[2] - y_breaks[1])/2]
# For per 'level-1-anno' Counts
agg_counts[, x_center := x_breaks[x_bin] + (x_breaks[2] - x_breaks[1])/2]
agg_counts[, y_center := y_breaks[y_bin] + (y_breaks[2] - y_breaks[1])/2]
# Plot Overall Density Contours
ggplot(agg_overall, aes(x = x_center, y = y_center, z = N)) +
stat_contour_filled(bins = 30) +  # Adjust 'bins' for contour levels
scale_fill_viridis_d(option = "C") +
theme_minimal() +
labs(title = "UMAP Projection Contour - Overall Density",
x = "X_umap_1",
y = "X_umap_2",
fill = "Count")
# Convert sf object to data.table for efficient manipulation
dt <- as.data.table(sf_df)
# Define Raster Resolution
# Adjust 'n_pixels' based on desired resolution and system capability
n_pixels <- 1000  # 1000x1000 grid
# Determine the bounding box
bbox <- st_bbox(sf_df)
# Create a grid with the specified resolution
x_breaks <- seq(bbox['xmin'], bbox['xmax'], length.out = n_pixels + 1)
y_breaks <- seq(bbox['ymin'], bbox['ymax'], length.out = n_pixels + 1)
# Assign each point to a grid cell
dt[, x_bin := cut(st_coordinates(.)[,1], breaks = x_breaks, include.lowest = TRUE, labels = FALSE)]
dt[, y_bin := cut(st_coordinates(.)[,2], breaks = y_breaks, include.lowest = TRUE, labels = FALSE)]
# Remove any points that fall outside the grid
dt <- dt[!is.na(x_bin) & !is.na(y_bin)]
# Compute Density Counts per Grid Cell
density_counts <- dt[, .N, by = .(x_bin, y_bin)]
# Define Raster Resolution
# Adjust 'n_pixels' based on desired resolution and system capability
n_pixels <- 1000  # 1000x1000 grid
# Determine the bounding box
bbox <- st_bbox(sf_df)
# Create a grid with the specified resolution
x_breaks <- seq(bbox['xmin'], bbox['xmax'], length.out = n_pixels + 1)
y_breaks <- seq(bbox['ymin'], bbox['ymax'], length.out = n_pixels + 1)
# Assign each point to a grid cell
dt[, x_bin := cut(st_coordinates(.)[,1], breaks = x_breaks, include.lowest = TRUE, labels = FALSE)]
